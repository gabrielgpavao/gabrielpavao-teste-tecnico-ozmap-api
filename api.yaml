openapi: 3.0.3
info:
  title: Teste Técnico OzMap
  description: |-
    Uma API REST com um CRUD de usuários, feita em NodeJS, Koa e TypeScript, além de possuir testes escritos com Mocha e Chai.
  version: 1.0.0
tags:
  - name: users
    description: User CRUD Operations
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserSchema'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Johnny
                  email:
                    type: string
                    example: johndoe@email.com
                  age:
                    type: number
                    example: 29
        '400':
          description: ZodError
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
                  age:
                    type: array
                    items:
                      type: string
        '409':
          description: Conflict Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: Email already exists
    get:
      tags:
        - users
      summary: List users
      description: Get all users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          schema:
            type: string
            default: 1
        - name: perPage
          in: query
          schema:
            type: string
            default: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  prevPage:
                    type: string
                    nullable: true
                    example: null
                  nextPage:
                    type: string
                    nullable: true
                    example: http://localhost:3001/users?page=2&perPage=1
                  count:
                    type: number
                    example: 2
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Johnny
                        email:
                          type: string
                          example: johndoe@email.com
                        age:
                          type: number
                          example: 29
  /users/{id}:
    get:
      tags:
        - users
      summary: Retrieve user
      description: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'User ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Johnny
                  email:
                    type: string
                    example: johndoe@email.com
                  age:
                    type: number
                    example: 29
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: User not found
    patch:
      tags:
        - users
      summary: Update user
      description: Update user by ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johnny@mail.com
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: Johnny
                  email:
                    type: string
                    example: johnny@email.com
                  age:
                    type: number
                    example: 29
        '400':
          description: ZodError
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
                  age:
                    type: array
                    items:
                      type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: User not found
        '409':
          description: Conflict Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 409
                  message:
                    type: string
                    example: Email already exists
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation - no content
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: User not found
components:
  schemas:
    CreateUserSchema:
      type: object
      properties:
        name:
          type: string
          example: Johnny
          description: Must be unique
        email:
          type: string
          example: johndoe@email.com
          description: Must be unique
        age:
          type: number
          example: 29
          description: It must be equal or greater than 18
      required:
        - name
        - email
        - age
    UpdateUserSchema:
      type: object
      properties:
        name:
          type: string
          example: Johnny
          description: Must be unique
        email:
          type: string
          example: johndoe@email.com
          description: Must be unique
        age:
          type: number
          example: 29
          description: It must be equal or greater than 18